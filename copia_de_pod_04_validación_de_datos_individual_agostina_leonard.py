# -*- coding: utf-8 -*-
"""Copia de POD - 04/Validación de datos/Individual - Agostina Leonard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15-CTJno5VNNXVKDhC4tnxBgbEkOQhLym

*   **Año:** [2024]
*   **Alumno/a:** [Agostina Leonard]
*   **Legajo:** [LEGAJO]

# Pydantic
Pydantic es una libreria rapida y extensible que nos permite validar datos usando tipos de datos de Python.

Primero, importe `pydantic`.
"""

!pip install pydantic

"""Supongamos que tenemos una lista de clientes (llamemoslo en el codigo `Client`). Los clientes tienen dos campos: DNI (un entero) y nacionalidad (un `string`). Cree el modelo base de `Client` (en forma de clases de Python)."""

from pydantic import BaseModel

class Client(BaseModel):
    DNI: int
    nacionalidad: str

"""Cree a un usuario con documento 39.755.010 y nacionalidad 'Argentina'. Muestre todos sus campos."""

usuario = Client(DNI=39755010, nacionalidad='Argentina')
print(usuario.dict())

"""Intente crear al usuario con un documento en forma de `string`. Deberia fallar..."""

usuario = Client(DNI="39755010", nacionalidad="Argentina")
print(usuario)

"""Hemos detectado que ciertos clientes tienen nacionalidades que no existen. Ademas, hay numeros de documento negativos y se tiene que poder agregar la fecha de registro de los clientes (que no pueden ser del futuro). Cambiar la definicion del cliente para que estas cosas no ocurran. Despues de la siguiente celda, cree otras 3 mas probando un caso donde deberia funcionar y otros dos en los que no."""

from pydantic import BaseModel, StrictInt, StrictStr, Field, validator
from datetime import date

class Client(BaseModel):
    DNI: StrictInt = Field(gt=0, description="Debe ser un número entero positivo")
    nacionalidad: StrictStr
    fecha_registro: date

    @validator("nacionalidad")
    def validar_nacionalidad(cls, value):
        paises_validos = {"Argentina", "Chile", "Uruguay", "Paraguay", "Brasil"}
        if value not in paises_validos:
            raise ValueError("Nacionalidad no válida")
        return value

    @validator("fecha_registro")
    def validar_fecha_registro(cls, value):
        if value > date.today():
            raise ValueError("La fecha de registro no puede ser del futuro")
        return value

usuario_valido = Client(DNI=39755010, nacionalidad="Argentina", fecha_registro=date(2023, 1, 1))
print(usuario_valido)

try:
    usuario_invalido = Client(DNI=39755010, nacionalidad="Fantasia", fecha_registro=date(2023, 1, 1))
except Exception as e:
    print(e)

try:
    usuario_invalido = Client(DNI=-12345, nacionalidad="Argentina", fecha_registro=date(2023, 1, 1))
except Exception as e:
    print(e)

"""# Pandera
Hacer lo que se pidio en la ultima celda anterior, pero con Pandera.
"""

import pandas as pd
import pandera as pa
from datetime import date

# Definir el esquema con Pandera
schema = pa.DataFrameSchema({
    "DNI": pa.Column(int, checks=pa.Check.ge(1)),  # DNI debe ser un entero positivo
    "nacionalidad": pa.Column(str, checks=pa.Check.isin(["Argentina", "Chile", "Uruguay", "Paraguay", "Brasil"])),  # Nacionalidad válida
    "fecha_registro": pa.Column(pd.Timestamp, checks=pa.Check.le(pd.Timestamp(date.today())))  # Fecha no futura
})

# Crear un DataFrame de prueba corregido
clientes_validos = pd.DataFrame([
    {"DNI": 39755010, "nacionalidad": "Argentina", "fecha_registro": "2023-01-01"},
    {"DNI": 12345678, "nacionalidad": "Chile", "fecha_registro": "2022-05-15"}
])

# Convertir la columna 'fecha_registro' al tipo datetime
clientes_validos['fecha_registro'] = pd.to_datetime(clientes_validos['fecha_registro'])

# Validar el DataFrame
validated_clientes = schema.validate(clientes_validos)
print("Todos los datos son válidos:")
print(validated_clientes)

# Crear un DataFrame con errores para probar validaciones
clientes_invalidos = pd.DataFrame([
    {"DNI": -12345, "nacionalidad": "Argentina", "fecha_registro": "2023-01-01"},  # DNI negativo
    {"DNI": 39755010, "nacionalidad": "Fantasia", "fecha_registro": "2023-01-01"},  # Nacionalidad inválida
    {"DNI": 39755010, "nacionalidad": "Argentina", "fecha_registro": "2030-01-01"}  # Fecha futura
])

# Convertir la columna 'fecha_registro' al tipo datetime
clientes_invalidos['fecha_registro'] = pd.to_datetime(clientes_invalidos['fecha_registro'])

# Intentar validar los datos con errores
try:
    validated_invalidos = schema.validate(clientes_invalidos)
except pa.errors.SchemaErrors as e:
    print("Errores detectados en los datos inválidos:")
    print(e.failure_cases)